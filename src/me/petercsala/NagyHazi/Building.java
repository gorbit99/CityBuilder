package me.petercsala.NagyHazi;

import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.awt.*;

/**
 * A building in the game
 */
public class Building extends Placeable {
    /**
     * The number of workplaces provided by the building
     */
    private long workplaces = 0;
    /**
     * The number of people living in the building
     */
    private long accommodation = 0;
    /**
     * The amount of water produced by the building
     */
    private long producedWater = 0;
    /**
     * The amount of waste generated by the building
     */
    private long producedWaste = 0;
    /**
     * The amount of electricity produced by the building
     */
    private long producedElectricity = 0;

    /**
     * The amount of water the building received
     */
    private long receivedWater = 0;
    /**
     * The amount of waste taken away from the building
     */
    private long handledWaste = 0;
    /**
     * Is the electricity requirement of the building met?
     */
    private boolean electricityProvided = false;
    /**
     * The decor in the area
     */
    private long areaDecor = 0;

    /**
     * Clone the building as a placeable
     *
     * @param actualPos The position to place the clone at
     * @return The resulting clone
     */
    @Override
    protected Placeable clone(TilePos actualPos) {
        Building copy = new Building();
        copy.name = name;
        copy.description = description;
        copy.size = size;
        copy.cost = cost;
        copy.sprite = sprite;
        copy.workplaces = workplaces;
        copy.accommodation = accommodation;
        copy.producedWater = producedWater;
        copy.producedWaste = producedWaste;
        copy.producedElectricity = producedElectricity;
        copy.actualPos = actualPos;
        copy.decorProvided = decorProvided;
        return copy;
    }

    /**
     * Virtual copy constructor pattern
     *
     * @param placeable The placeable to clone into the building
     */
    @Override
    protected void cloneFrom(Placeable placeable) {
        if (!(placeable instanceof Building)) {
            throw new RuntimeException("Trying to load an invalid building!");
        }
        Building building = (Building) placeable;

        name = placeable.name;
        description = placeable.description;
        size = placeable.size;
        cost = placeable.cost;
        sprite = placeable.sprite;
        workplaces = building.workplaces;
        accommodation = building.accommodation;
        producedWater = building.producedWater;
        producedWaste = building.producedWaste;
        producedElectricity = building.producedElectricity;
        decorProvided = building.decorProvided;
    }

    /**
     * Draw the building
     *
     * @param ctx    The graphics context
     * @param camera The camera in the scene
     */
    @Override
    protected void drawSelf(GraphicsContext ctx, Camera camera) {
        Point position = camera.worldToCameraSpace(actualPos.getRealPos());
        ctx.drawImage(sprite, position.x, position.y);
    }

    /**
     * Get the happiness from the decor in the area
     *
     * @return The resulting happiness
     */
    @Override
    protected double getDecorHappiness() {
        return 1 - (1 / (areaDecor / 100.0 + 1));
    }

    /**
     * Get the happiness from the provided water
     *
     * @return The resulting happiness
     */
    @Override
    protected double getWaterHappiness() {
        if (producedWater > 0) {
            return 1;
        }
        double waterRatio = (double) receivedWater / -producedWater;
        return 1 - (3 / (waterRatio + 0.5) - 2) / 4;
    }

    /**
     * Get the happinness from the handled waste
     *
     * @return The resulting happiness
     */
    @Override
    protected double getWasteHappiness() {
        if (producedWaste < 0) {
            return 1;
        }
        double wasteRatio = (double) handledWaste / producedWaste;
        return 1 - (3 / (wasteRatio + 0.5) - 2) / 4;
    }

    /**
     * Get the happiness from the provided electricity
     *
     * @return The resulting happiness
     */
    @Override
    protected double getElectricityHappiness() {
        if (producedElectricity > 0) {
            return 1;
        }
        return electricityProvided ? 1 : 0.5;
    }

    /**
     * Get the default happiness value
     *
     * @return The resulting happiness
     */
    @Override
    protected double getBaseHappiness() {
        return 1;
    }

    /**
     * Get the multiplier of the happiness value
     *
     * @return The resulting happiness
     */
    @Override
    public double getHappinessMultiplier() {
        return accommodation;
    }

    /**
     * Get the number of people living in the building
     *
     * @return The number of people living in the house
     */
    @Override
    public long getResidents() {
        return accommodation;
    }

    /**
     * Update the building
     *
     * @param map The map the building is in
     */
    @Override
    public void update(Map map) {
    }

    /**
     * Reset the resource numbers
     */
    @Override
    public void resetResources() {
        receivedWater = 0;
        handledWaste = 0;
    }

    /**
     * Pipe some water into the building
     *
     * @param capacity The capacity of the water pipe
     * @return The remaining capacity
     */
    @Override
    public long pipeWater(long capacity) {
        if (producedWater >= 0) {
            return capacity;
        }
        if (capacity > -producedWater - receivedWater) {
            capacity -= -producedWater - receivedWater;
            receivedWater = -producedWater;
            return capacity;
        } else {
            receivedWater += capacity;
            return 0;
        }
    }

    /**
     * Handle some waste from the building
     *
     * @param capacity The capacity of the waste pipe
     * @return The remaining capacity
     */
    @Override
    public long handleWaste(long capacity) {
        if (producedWaste <= 0) {
            return capacity;
        }
        if (-capacity > producedWaste - handledWaste) {
            capacity += producedWaste - handledWaste;
            handledWaste = producedWaste;
            return capacity;
        } else {
            handledWaste -= capacity;
            return 0;
        }
    }

    /**
     * Add some decor to the area
     *
     * @param decor The decor to be added
     */
    @Override
    public void addDecor(long decor) {
        areaDecor += decor;
    }

    /**
     * Get the water production of the building
     *
     * @return The water production
     */
    @Override
    public long getWaterProduction() {
        return producedWater;
    }

    /**
     * Get the waste production of the building
     *
     * @return The waste production
     */
    @Override
    public long getWasteProduction() {
        return producedWaste;
    }

    /**
     * Get the electricity production of the building
     *
     * @return The electricity production
     */
    @Override
    public long getElectricityProduction() {
        return producedElectricity;
    }

    /**
     * Set if the electricity system can handle the load
     *
     * @param set The new value
     */
    @Override
    public void setElectricityProvided(boolean set) {
        electricityProvided = set;
    }

    /**
     * Is the building a road
     *
     * @return false
     */
    @Override
    public boolean isRoad() {
        return false;
    }

    /**
     * Get the graphic that should be placed on the building button
     *
     * @return The graphic
     */
    @Override
    public ImageView getButtonGraphic() {
        ImageView imageView = new ImageView(sprite);
        imageView.setFitWidth(32);
        imageView.setFitHeight(32);
        return imageView;
    }

    /**
     * Check if this is equal to an object
     * @param obj The other object
     * @return Are they equal
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Building)) {
            return false;
        }

        Building building = (Building)obj;

        return super.equals(obj)
                && building.producedElectricity == producedElectricity
                && building.producedWater == producedWater
                && building.producedWaste == producedWaste
                && building.accommodation == accommodation
                && building.workplaces == workplaces;
    }

    /**
     * Builder pattern for a building
     */
    public static class BuildingBuilder implements IPlaceableBuilder {
        /**
         * The building being built
         */
        private final Building building;

        /**
         * Constructor
         *
         * @param name The name of the building
         */
        public BuildingBuilder(String name) {
            building = new Building();
            building.name = name;
        }

        /**
         * Set the description of the building
         *
         * @param description The description
         */
        public void setDescription(String description) {
            building.description = description;
        }

        /**
         * Set the path to the building sprite
         *
         * @param spritePath The path
         */
        public void setSprite(String spritePath) {
            building.sprite = new Image(String.valueOf(getClass().getClassLoader().getResource("userResources/" + spritePath)));
            building.size = new Point((int) building.sprite.getWidth() / 16, (int) building.sprite.getHeight() / 16);
        }

        /**
         * Set the cost of the building
         *
         * @param cost The cost
         */
        public void setCost(long cost) {
            building.cost = cost;
        }

        /**
         * Set the number of workplaces provided by the building
         *
         * @param workplaces The number of workplaces
         */
        public void setWorkplaces(long workplaces) {
            building.workplaces = workplaces;
        }

        /**
         * Set the number of people living in the building
         *
         * @param accommodation The number of people
         */
        public void setAccommodation(long accommodation) {
            building.accommodation = accommodation;
        }

        /**
         * Set the amount of water produced by the building
         *
         * @param producedWater The amount of water
         */
        public void setProducedWater(long producedWater) {
            building.producedWater = producedWater;
        }

        /**
         * Set the amount of waste produced by the building
         *
         * @param producedWaste The amount of waste
         */
        public void setProducedWaste(long producedWaste) {
            building.producedWaste = producedWaste;
        }

        /**
         * Set the amount of electricity produced by the building
         *
         * @param producedElectricity The amount of electricity
         */
        public void setProducedElectricity(long producedElectricity) {
            building.producedElectricity = producedElectricity;
        }

        /**
         * Build the resulting building
         *
         * @return The resulting building
         */
        public Building build() {
            if (building.isInvalid()) {
                return null;
            }
            return building;
        }

        /**
         * Set the amount of decor provided
         *
         * @param decor The amount of decor
         */
        public void setDecorProvided(long decor) {
            building.decorProvided = decor;
        }
    }
}
